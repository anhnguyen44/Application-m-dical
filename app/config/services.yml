# Learn more about services, parameters and containers at
# https://symfony.com/doc/current/service_container.html
parameters:
    #parameter_name: value


services:
    # default configuration for services in *this* file
    _defaults:
        # automatically injects dependencies in your services
        autowire: true
        # automatically registers your services as commands, event subscribers, etc.
        autoconfigure: true
        # this means you cannot fetch services directly from the container via $container->get()
        # if you need to do this, you can override this setting on individual services
        public: false
    #Used to sort elements in twig
    twig.extension.sortbyfield:
        class: Snilius\Twig\SortByFieldExtension
        tags:
            - { name: twig.extension }
    
    twig.extension.intl:
        class: Twig_Extensions_Extension_Intl
        tags:
            - { name: twig.extension }

    #Used to encrypt images, videos and other files
    files.encryptor:
        class: AppBundle\Services\FilesEncryptor
        public: true
        arguments:
            - '%images_directory%'
            - '%videos_directory%'
            - '%files_directory%'
            - '@doctrine'

    #Used to upload images, videos and other files
    file.uploader:
        class: AppBundle\Services\FileUploader
        public: true
        arguments:
            - '%images_directory%'
            - '%videos_directory%'
            - '%files_directory%'
            - '@doctrine'

    save.storage:
        class: AppBundle\Services\SaveStorage
        public: true
    
    save.config:
        class: AppBundle\Services\SaveConfig
        public: true

    save.process:
        class: AppBundle\Services\SaveProcess
        public: true
        arguments:
            - '@save.storage'
            - '%database_name%'
            - '%database_user%'
            - '%database_password%'


    database.permission:
        class: AppBundle\Services\databasePermission
        public: true
        arguments: [ '@doctrine.orm.entity_manager' ]

            
    # makes classes in src/AppBundle available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    AppBundle\:
        resource: '../../src/AppBundle/*'
        # you can exclude directories or files
        # but if a service is unused, it's removed anyway
        exclude: '../../src/AppBundle/{Entity,Repository,Tests}'


#    AppBundle\Services\FileUploader: '@FileUploader'

    # controllers are imported separately to make sure they're public
    # and have a tag that allows actions to type-hint services
    AppBundle\Controller\:
        resource: '../../src/AppBundle/Controller'
        public: true
        tags: ['controller.service_arguments']

    # add more services, or override services that need manual wiring
    # AppBundle\Service\ExampleService:
    #     arguments:
    #         $someArgument: 'some_value'



#    service_name:
#        class: AppBundle\Directory\ClassName
#        arguments: ["@another_service_name", "plain_value", "%parameter_name%"]

#register our custom service with a name in this case OCWServices
    notification:
# The namespace with the name of the class that contain our service
        class: AppBundle\Services\Notifications
#The services that we will inject (see the constructor)
        arguments: [ "@doctrine" , "@service_container"]
        public : true
